rules_version = '2';
service cloud.firestore {
  // --- Helpers ---
  function isAuthed() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isAuthed() && request.auth.uid == userId;
  }

  // Require userId field to exist and match path userId on create/update
  function hasValidUserId(userId) {
    return request.resource.data.userId is string
           && request.resource.data.userId == userId;
  }

  // Prevent changing owner on update
  function isMaintainingOwnership() {
    return resource.data.userId == request.resource.data.userId;
  }

  // Optional: restrict allowed keys to reduce attack surface
  // Pass an array of allowed keys per collection if you want stricter control.
  function hasOnlyAllowedKeys(allowedKeys) {
    return request.resource.data.keys().hasOnly(allowedKeys);
  }

  match /databases/{database}/documents {

    // --- /users collection ---
    match /users/{userId} {
      // Allow read of own doc, but disallow collection listing
      allow get: if isOwner(userId);
      allow list: if false;

      // Create/update/delete only by owner; enforce userId correctness and immutability
      allow create: if isOwner(userId) && hasValidUserId(userId);
      allow update: if isOwner(userId) && isMaintainingOwnership() && hasValidUserId(userId);
      allow delete: if isOwner(userId);
    }

    // --- /users/{userId}/plans ---
    match /users/{userId}/plans/{planId} {
      allow get, delete: if isOwner(userId);
      allow create: if isOwner(userId) && hasValidUserId(userId);
      allow update: if isOwner(userId) && isMaintainingOwnership() && hasValidUserId(userId);
    }

    // --- /users/{userId}/itineraries ---
    // This block specifically handles the itineraries subcollection
    match /users/{userId}/itineraries/{itineraryId} {
      allow get, list: if isOwner(userId); // Allows owner to read single itinerary or list their own
      allow create: if isOwner(userId) && hasValidUserId(userId); // Allows owner to create new itineraries
      allow update: if isOwner(userId) && isMaintainingOwnership() && hasValidUserId(userId); // Allows owner to update their itineraries
      allow delete: if isOwner(userId); // Allows owner to delete their itineraries
    }

    // --- All descendants under a plan (true recursive wildcard) ---
    // Covers: tasks, reminders, people, organizations, locations, nested things, etc.
    match /users/{userId}/plans/{planId}/{document=**} {
      // Enforce ownership AND userId presence/match on writes
      allow get, list: if isOwner(userId); // list here still only returns caller-owned docs
      allow create: if isOwner(userId) && hasValidUserId(userId);
      allow update: if isOwner(userId) && isMaintainingOwnership() && hasValidUserId(userId);
      allow delete: if isOwner(userId);
    }
  }
}
